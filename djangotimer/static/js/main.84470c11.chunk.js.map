{"version":3,"sources":["logo.svg","Stopwatch.jsx","RecognizeVoice.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Stopwatch","props","formatTime","val","value","toString","length","start","state","running","setState","reset","playAudio","setTimeout","watch","setInterval","pace","stop","duration","currentTimeMin","currentTimeSec","currentTimeMs","milliseconds","parseInt","seconds","Math","floor","minutes","clearInterval","nextProps","console","log","transcript","toLowerCase","includes","this","resetTranscript","document","getElementsByClassName","play","className","ref","onEnded","src","onClick","React","Component","SpeechRecognition","browserSupportsSpeechRecognition","App","RecognizeVoice","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.84470c11.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useEffect } from \"react\";\r\n\r\nclass Stopwatch extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      running: false,\r\n      currentTimeMs: 0,\r\n      currentTimeSec: 0,\r\n      currentTimeMin: 0\r\n    };\r\n  }\r\n\r\n  // Transcript changes\r\n  componentWillReceiveProps(nextProps) {\r\n    console.log(\"Received props?\");\r\n    console.log(nextProps.transcript);\r\n    if (\r\n      nextProps.transcript.toLowerCase().includes(\"start\") ||\r\n      nextProps.transcript.toLowerCase().includes(\"fun\")\r\n    ) {\r\n      this.start();\r\n      nextProps.resetTranscript();\r\n    } else if (nextProps.transcript.toLowerCase().includes(\"stop\")) {\r\n      this.stop();\r\n      nextProps.resetTranscript();\r\n    } else if (nextProps.transcript.toLowerCase().includes(\"reset\")) {\r\n      this.reset();\r\n      nextProps.resetTranscript();\r\n    }\r\n  }\r\n\r\n  formatTime = (val, ...rest) => {\r\n    let value = val.toString();\r\n    if (value.length < 2) {\r\n      value = \"0\" + value;\r\n    }\r\n    if (rest[0] === \"ms\" && value.length < 3) {\r\n      value = \"0\" + value;\r\n    }\r\n    return value;\r\n  };\r\n\r\n  start = () => {\r\n    if (!this.state.running) {\r\n      this.setState({ running: true });\r\n      this.reset();\r\n      this.playAudio();\r\n      setTimeout(() => {\r\n        this.watch = setInterval(() => this.pace(), 10);\r\n      }, 4100);\r\n    }\r\n  };\r\n\r\n  stop = () => {\r\n    let duration =\r\n      this.state.currentTimeMin * 60 * 1000 +\r\n      this.state.currentTimeSec * 1000 +\r\n      this.state.currentTimeMs;\r\n    duration -= 400; // About the time it takes to recognize the stop command\r\n    if (duration < 0) duration = 0;\r\n    var milliseconds = parseInt(duration % 1000),\r\n      seconds = Math.floor((duration / 1000) % 60),\r\n      minutes = Math.floor((duration / (1000 * 60)) % 60);\r\n    minutes = minutes < 10 ? 0 + minutes : minutes;\r\n    seconds = seconds < 10 ? 0 + seconds : seconds;\r\n\r\n    this.setState({\r\n      currentTimeMin: minutes,\r\n      currentTimeSec: seconds,\r\n      currentTimeMs: milliseconds,\r\n      running: false\r\n    });\r\n    clearInterval(this.watch);\r\n  };\r\n\r\n  pace = () => {\r\n    this.setState({ currentTimeMs: this.state.currentTimeMs + 10 });\r\n    if (this.state.currentTimeMs >= 1000) {\r\n      this.setState({ currentTimeSec: this.state.currentTimeSec + 1 });\r\n      this.setState({ currentTimeMs: 0 });\r\n    }\r\n    if (this.state.currentTimeSec >= 60) {\r\n      this.setState({ currentTimeMin: this.state.currentTimeMin + 1 });\r\n      this.setState({ currentTimeSec: 0 });\r\n    }\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({\r\n      currentTimeMs: 0,\r\n      currentTimeSec: 0,\r\n      currentTimeMin: 0,\r\n      running: false\r\n    });\r\n    clearInterval(this.watch);\r\n  };\r\n  playAudio() {\r\n    const audioEl = document.getElementsByClassName(\"audio-element\")[0];\r\n    audioEl.play();\r\n  }\r\n  render() {\r\n    return (\r\n      <div className={\"stopwatch\"}>\r\n        <h2 ref=\"header\">Stopwatch</h2>\r\n        <span>\r\n          {this.formatTime(this.state.currentTimeMin)}:\r\n          {this.formatTime(this.state.currentTimeSec)}:\r\n          {this.formatTime(this.state.currentTimeMs)}\r\n          <br></br>\r\n        </span>\r\n        <audio className=\"audio-element\" onEnded={() => {}}>\r\n          <source src=\"/Beeping.mp3\"></source>\r\n        </audio>\r\n        {this.state.running === false && (\r\n          <button onClick={this.start}>START</button>\r\n        )}\r\n        {this.state.running === true && (\r\n          <button onClick={this.stop}>STOP</button>\r\n        )}\r\n        <button onClick={this.reset}>RESET</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Stopwatch;\r\n","import React, { Component, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport SpeechRecognition from \"react-speech-recognition\";\r\nimport Stopwatch from \"./Stopwatch\";\r\nconst propTypes = {\r\n  // Props injected by SpeechRecognition\r\n  transcript: PropTypes.string,\r\n  resetTranscript: PropTypes.func,\r\n  browserSupportsSpeechRecognition: PropTypes.bool\r\n};\r\n\r\nconst Dictaphone = ({\r\n  transcript,\r\n  resetTranscript,\r\n  browserSupportsSpeechRecognition\r\n}) => {\r\n  if (!browserSupportsSpeechRecognition) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Stopwatch\r\n        transcript={transcript}\r\n        resetTranscript={resetTranscript}\r\n      ></Stopwatch>\r\n      {/* <button onClick={resetTranscript}>Reset</button>\r\n      <span>{transcript}</span> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nDictaphone.propTypes = propTypes;\r\n\r\nexport default SpeechRecognition(Dictaphone);\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport SpeechRecognition from \"react-speech-recognition\";\nimport RecognizeVoice from \"./RecognizeVoice\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <RecognizeVoice></RecognizeVoice>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}