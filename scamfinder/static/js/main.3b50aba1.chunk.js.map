{"version":3,"sources":["logo.svg","components/ScammerNumberItem.js","components/ScammerFinderPage.js","components/Information.js","components/ChoicePage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ScammerNumberItem","ScammerFinderPage","props","useState","items","setItems","loading","setLoading","history","useHistory","FindNumber","str","clean","replace","matches","exec","length","useEffect","params","queryString","parse","location","search","query","sortBy","timeFrame","count","showAll","fetch","encodeURIComponent","then","res","json","resJson","items_with_phone_nr","data","children","filter","item","title","console","log","JSON","stringify","displayItems","map","age","timestamp1","timestamp2","difference","Math","floor","diff","Date","getTime","created_utc","round","link","permalink","number","tempList","scammer","alreadyInList","push","active","style","backgroundColor","blue","primary","onBack","subTitle","status","textAlign","extra","color","type","key","onClick","window","reload","gutter","marginLeft","marginRight","marginTop","marginBottom","paddingBottom","span","border","boxShadow","paddingRight","href","target","Information","fontFamily","fontSize","ChoicePage","state","setState","onChange","e","value","name","isNaN","prevState","radioStyle","display","height","lineHeight","offset","Group","min","max","defaultValue","precision","newVal","prevVal","checked","defaultChecked","placeholder","width","icon","App","exact","path","component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iLAAAA,EAAOC,QAAU,IAA0B,kC,8KCmB5BC,I,qFC8MAC,MArMf,SAA2BC,GAAQ,IAAD,EACNC,mBAAS,IADH,mBACzBC,EADyB,KAClBC,EADkB,OAEFF,oBAAS,GAFP,mBAEzBG,EAFyB,KAEhBC,EAFgB,KAG1BC,EAAUC,cACVC,EAAa,SAAAC,GAKjB,IAAIC,EAAQD,EAAIE,QAAQ,0BAA2B,IAKnDD,GADAA,GAFAA,EAAQA,EAAMC,QAAQ,gCAAiC,KAEzCA,QAAQ,gBAAiB,KACzBA,QAAQ,IAAK,KAAKA,QAAQ,IAAK,KAC7C,IAAIC,EAAU,gFAAgFC,KAC5FH,GAEF,OAAe,MAAXE,GAAmBA,EAAQE,OAAS,EAC/BF,EAAQ,GAEV,MAgGT,OA3EAG,qBAAU,WACR,IAAIC,EAASC,IAAYC,MAAMlB,EAAMmB,SAASC,QAG1CC,EAAQL,EAAM,MAClBK,EAAiB,MAATA,EAAgB,eAAiBA,EAEzC,IAAIC,EAASN,EAAM,OACnBM,EAAmB,MAAVA,EAAiB,MAAQA,EAElC,IAAIC,EAAYP,EAAM,UACtBO,EAAyB,MAAbA,EAAoB,MAAQA,EAExC,IAAIC,EAAQR,EAAM,MAClBQ,EAAiB,MAATA,EAAgB,IAAMA,EAE9B,IAAIC,EAAUT,EAAM,QACpBS,EAAqB,MAAXA,GAAqC,SAAZA,EAEnCC,MACE,+BACEC,mBACE,yDACEN,EACA,SACAC,EACA,MACAC,IAGLK,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJ,IAAIC,EAAsBD,EAAQE,KAAKC,SAASC,QAAO,SAAAC,GAAI,OACzD5B,EAAW4B,EAAKH,KAAKI,UAEvBC,QAAQC,IAAI,WAAaC,KAAKC,UAAUT,IACxC,IAAIU,EAAeV,EAAoBW,KAAI,SAAAP,GACzC,IAAIQ,EAxDC,SAACC,EAAYC,GACxB,IAAIC,EAAaF,EAAaC,EAG9B,OAFcE,KAAKC,MAAMF,EAAa,IAAO,IAsD7BG,EAAK,IAAIC,MAAOC,UAAmC,IAAxBhB,EAAKH,KAAKoB,aAQ/C,OAPAf,QAAQC,IAAIK,GACRA,EAAM,GACRA,EAAMI,KAAKM,MAAMV,EAAM,IAAM,SAE7BA,GAAY,OAGP,CACLP,MAAOD,EAAKH,KAAKI,MACjBkB,KAAM,qBAAuBnB,EAAKH,KAAKuB,UACvCZ,IAAKA,EACLa,OAAQjD,EAAW4B,EAAKH,KAAKI,WAKjC,IAAKZ,EAAS,CACZ,IAAIiC,EAAW,GADH,uBAEZ,YAAsBhB,EAAtB,+CAAoC,CAAC,IAA1BiB,EAAyB,QAE9BC,GAAgB,EAFc,uBAGlC,YAAgBF,EAAhB,+CAA0B,SAClBD,QAAUE,EAAQF,SACtBG,GAAgB,IALc,kFAQ7BA,GACHF,EAASG,KAAKF,IAXN,kFAcZjB,EAAegB,EAGjBvD,EAASuC,GACTrC,GAAW,QAEd,IAED,6BACE,kBAAC,IAAD,CAAUD,QAASA,EAAS0D,QAAM,GAChC,kBAAC,IAAD,CACEC,MAAO,CAAEC,gBAAiBC,OAAKC,SAC/BC,OAAQ,kBAAM7D,EAAQuD,KAAK,MAC3BxB,MAAM,OACN+B,SAAS,oBAEThE,GAA2B,GAAhBF,EAAMY,OA6BjB,8BA5BA,kBAAC,IAAD,CACEuD,OAAO,QAGPN,MAAO,CAAEO,UAAW,UACpBC,MAAO,CACL,wBAAIR,MAAO,CAAES,MAAO,UAApB,0BACA,iEACA,kBAAC,IAAD,CACEC,KAAK,UACLC,IAAI,UACJC,QAAS,WACPC,OAAOzD,SAAS0D,WAJpB,SASA,kBAAC,IAAD,CACEH,IAAI,MACJC,QAAS,WACPrE,EAAQuD,KAAK,OAHjB,cAaN,kBAAC,IAAD,CACEiB,OAAQ,GACRf,MAAO,CACLgB,WAAY,GACZC,YAAa,GACbC,UAAW,GACXC,aAAc,KAGfhF,EAAMyC,KAAI,SAAAP,GAAI,OACb,kBAAC,IAAD,CAAK2B,MAAO,CAAEoB,cAAe,QAAUC,KAAM,GAC3C,kBAAC,IAAD,CACE/C,MAAOD,EAAKC,MAGZ0B,MAAO,CACLsB,OAAQ,iBACRrB,gBAAiB,OACjBsB,UAAW,8BACXC,aAAc,KAGhB,mCAASnD,EAAKQ,KACd,6CAAmBR,EAAKqB,QACxB,mCACQ,IACN,uBAAG+B,KAAMpD,EAAKmB,KAAMkC,OAAO,UAA3B,uB,4DCjMHC,MAhBf,SAAqB1F,GACnB,OACE,yBACE+D,MAAO,CACLO,UAAW,SACXqB,WAAY,8BAGd,wBAAI5B,MAAO,CAAES,MAAO,QAASoB,SAAU,KAAvC,gCAGA,iGCgISC,MA9Hf,SAAoB7F,GAAQ,IAAD,EACCC,mBAAS,CACjCqB,OAAQ,MACRC,UAAW,OACXF,MAAO,eACPG,MAAO,IACPC,SAAS,IANc,mBAClBqE,EADkB,KACXC,EADW,KAQnBzF,EAAUC,cAEVyF,EAAW,SAAAC,GAAM,IAAD,EACIA,EAAER,OAAlBS,EADY,EACZA,MAAOC,EADK,EACLA,KACTC,MAAMF,IAAoB,KAAVA,GAAmBE,MAAMD,IAAkB,KAATA,GACtDJ,GAAS,SAAAM,GAAS,sBACbA,EADa,eAEfF,EAAOD,QAgBRI,EAAa,CACjBC,QAAS,QACTC,OAAQ,OACRC,WAAY,QAEd,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKrB,KAAM,GAAIsB,OAAQ,EAAG3C,MAAO,CAAEO,UAAW,WAC5C,kBAAC,IAAD,CAAMjC,MAAM,8BACV,kBAAC,IAAMsE,MAAP,CAAaX,SAAUA,EAAUG,KAAK,SAASD,MAAOJ,EAAMxE,QAC1D,kBAAC,IAAD,CAAOyC,MAAOuC,EAAYJ,MAAO,OAAjC,OAGA,kBAAC,IAAD,CAAOnC,MAAOuC,EAAYJ,MAAO,aAAjC,aAGA,kBAAC,IAAD,CAAOnC,MAAOuC,EAAYJ,MAAO,OAAjC,SAKJ,6BAEA,kBAAC,IAAD,CAAM7D,MAAM,kEACV,kBAAC,IAAMsE,MAAP,CACEX,SAAUA,EACVG,KAAK,YACLD,MAAOJ,EAAMvE,WAEb,kBAAC,IAAD,CAAOwC,MAAOuC,EAAYJ,MAAO,QAAjC,QAGA,kBAAC,IAAD,CAAOnC,MAAOuC,EAAYJ,MAAO,OAAjC,OAGA,kBAAC,IAAD,CAAOnC,MAAOuC,EAAYJ,MAAO,QAAjC,UAKJ,6BAEA,kBAAC,IAAD,CAAM7D,MAAM,2EACV,kBAAC,IAAD,CACEuE,IAAK,GACLC,IAAK,IACLC,aAAa,KACbX,KAAK,QACLY,UAAW,EACXf,SA/DS,SAAAgB,GACnBjB,GAAS,SAAAM,GAAS,sBACbA,EADa,CAEhB7E,MAAOwF,WA+DH,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAUhB,SA7DI,SAAAC,GACtBF,GAAS,SAAAkB,GAAO,sBACXA,EADW,CAEdxF,QAASwE,EAAER,OAAOyB,cA0DyBC,gBAAgB,GAArD,2BAIF,6BACA,kBAAC,IAAD,CAAM9E,MAAM,6EACV,kBAAC,IAAD,CACE+E,YAAY,eACZjB,KAAK,QACLH,SAAUA,EACVjC,MAAO,CAAEsD,MAAO,IAAKnC,aAAc,UAErC,6BACA,kBAAC,IAAD,CACET,KAAK,UACL6C,KAAK,SACL3C,QAAS,WACPrE,EAAQuD,KACN,mBACEiC,EAAMvE,UACN,WACAuE,EAAMxE,OACN,UACAwE,EAAMzE,MACN,UACAyE,EAAMtE,MACN,YACAsE,EAAMrE,WAdd,eClGG8F,MATf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAM,IAAKC,UAAW7B,IACnC,kBAAC,IAAD,CAAO4B,KAAM,QAASC,UAAW3H,MCCnB4H,QACW,cAA7B/C,OAAOzD,SAASyG,UAEe,UAA7BhD,OAAOzD,SAASyG,UAEhBhD,OAAOzD,SAASyG,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxG,MAAK,SAAAyG,GACjCA,EAAaC,kB","file":"static/js/main.3b50aba1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport { Card } from \"antd\";\r\nimport \"antd/dist/antd.css\"; // or 'antd/dist/antd.less'\r\nfunction ScammerNumberItem(props) {\r\n  return (\r\n    <div>\r\n      <Card\r\n        title={props.title}\r\n        // extra={<a href=\"#\">Link to reddit</a>}\r\n        style={{ width: window.innerWidth / 3 }}\r\n      >\r\n        <p>Age: {props.age}</p>\r\n        <p>Parsed number: {props.number}</p>\r\n        <p>Link: {props.link}</p>\r\n      </Card>{\" \"}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ScammerNumberItem;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport fetchJsonp from \"fetch-jsonp\";\r\nimport axios from \"axios\";\r\nimport StackGrid from \"react-stack-grid\";\r\nimport ScammerNumberItem from \"./ScammerNumberItem\";\r\nimport { utc } from \"moment\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { blue } from \"@ant-design/colors\";\r\nimport {\r\n  Skeleton,\r\n  Row,\r\n  Col,\r\n  Card,\r\n  Result,\r\n  Icon,\r\n  Typography,\r\n  Button,\r\n  PageHeader\r\n} from \"antd\";\r\n\r\nimport queryString from \"query-string\";\r\nconst style = {\r\n  width: \"350px\",\r\n  height: \"200px\",\r\n  border: \"solid 1px #555\",\r\n  backgroundColor: \"#eed\",\r\n  boxShadow: \"10px -10px  rgba(0,0,0,0.6)\"\r\n};\r\nfunction ScammerFinderPage(props) {\r\n  const [items, setItems] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const history = useHistory();\r\n  const FindNumber = str => {\r\n    // Sometimes we have strings that have a single I or O in them\r\n    // ... Can I Uninstall ...\r\n    // This I would be replaced with a 1 later on and cause the number to become invalid.\r\n    // Look for these sorts of situations and remove them!\r\n    var clean = str.replace(/[a-zA-Z] [IO] [a-zA-Z]/g, \"\");\r\n    //  Filter out words that have more than 3 consequent characters\r\n    clean = clean.replace(/(?:[a-zA-Z]{3,}|[\\$\\@()+.])+/g, \"\");\r\n    // Remove non alphanumeric chars\r\n    clean = clean.replace(/[^a-zA-Z0-9]/g, \"\");\r\n    clean = clean.replace(\"I\", \"1\").replace(\"O\", \"0\");\r\n    let matches = /\\s*(?:\\+?(\\d{1,3}))?[-. (]*(\\d{3})[-. )]*(\\d{3})[-. ]*(\\d{4})(?: *x(\\d+))?\\s*/.exec(\r\n      clean\r\n    );\r\n    if (matches != null && matches.length > 0) {\r\n      return matches[0];\r\n    }\r\n    return null;\r\n  };\r\n  const diff = (timestamp1, timestamp2) => {\r\n    var difference = timestamp1 - timestamp2;\r\n    var minutes = Math.floor(difference / 1000 / 60);\r\n\r\n    return minutes;\r\n  };\r\n\r\n  const chunk = (arr, len) => {\r\n    var chunks = [],\r\n      i = 0,\r\n      n = arr.length;\r\n\r\n    while (i < n) {\r\n      chunks.push(arr.slice(i, (i += len)));\r\n    }\r\n\r\n    return chunks;\r\n  };\r\n\r\n  useEffect(() => {\r\n    let params = queryString.parse(props.location.search);\r\n    // https://www.reddit.com/r/all/search/.json?count=20&q=tech%20support&sort=new&t=hour\r\n    // Homies over there allow us to make proper jsonp calls without building backend\r\n    let query = params[\"query\"];\r\n    query = query == null ? \"tech support\" : query;\r\n\r\n    let sortBy = params[\"sortBy\"];\r\n    sortBy = sortBy == null ? \"new\" : sortBy;\r\n\r\n    let timeFrame = params[\"timeFrame\"];\r\n    timeFrame = timeFrame == null ? \"day\" : timeFrame;\r\n\r\n    let count = params[\"count\"];\r\n    count = count == null ? 125 : count;\r\n\r\n    let showAll = params[\"showAll\"];\r\n    showAll = showAll == null ? true : showAll === \"true\";\r\n\r\n    fetch(\r\n      \"https://jsonp.afeld.me/?url=\" +\r\n        encodeURIComponent(\r\n          \"https://www.reddit.com/r/all/search/.json?count=125&q=\" +\r\n            query +\r\n            \"&sort=\" +\r\n            sortBy +\r\n            \"&t=\" +\r\n            timeFrame\r\n        )\r\n    )\r\n      .then(res => res.json())\r\n      .then(resJson => {\r\n        let items_with_phone_nr = resJson.data.children.filter(item =>\r\n          FindNumber(item.data.title)\r\n        );\r\n        console.log(\"itetms: \" + JSON.stringify(items_with_phone_nr));\r\n        let displayItems = items_with_phone_nr.map(item => {\r\n          let age = diff(new Date().getTime(), item.data.created_utc * 1000);\r\n          console.log(age);\r\n          if (age > 60) {\r\n            age = Math.round(age / 60) + \" hours\";\r\n          } else {\r\n            age = age + \" min\";\r\n          }\r\n\r\n          return {\r\n            title: item.data.title,\r\n            link: \"https://reddit.com\" + item.data.permalink,\r\n            age: age,\r\n            number: FindNumber(item.data.title)\r\n          };\r\n        });\r\n\r\n        // Filter out numbers if needed\r\n        if (!showAll) {\r\n          let tempList = [];\r\n          for (const scammer of displayItems) {\r\n            // Check if already in list\r\n            let alreadyInList = false;\r\n            for (const s of tempList) {\r\n              if (s.number == scammer.number) {\r\n                alreadyInList = true;\r\n              }\r\n            }\r\n            if (!alreadyInList) {\r\n              tempList.push(scammer);\r\n            }\r\n          }\r\n          displayItems = tempList;\r\n        }\r\n\r\n        setItems(displayItems);\r\n        setLoading(false);\r\n      });\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <Skeleton loading={loading} active>\r\n        <PageHeader\r\n          style={{ backgroundColor: blue.primary }}\r\n          onBack={() => history.push(\"/\")}\r\n          title=\"Menu\"\r\n          subTitle=\"Go back to menu\"\r\n        />\r\n        {!loading && items.length == 0 ? (\r\n          <Result\r\n            status=\"error\"\r\n            // title=\"No results found\"\r\n            // subTitle=\"Try a different set of parameters..\"\r\n            style={{ textAlign: \"center\" }}\r\n            extra={[\r\n              <h1 style={{ color: \"white\" }}>No results were found.</h1>,\r\n              <p>Try a different set of parameters.</p>,\r\n              <Button\r\n                type=\"primary\"\r\n                key=\"console\"\r\n                onClick={() => {\r\n                  window.location.reload();\r\n                }}\r\n              >\r\n                Retry\r\n              </Button>,\r\n              <Button\r\n                key=\"buy\"\r\n                onClick={() => {\r\n                  history.push(\"/\");\r\n                }}\r\n              >\r\n                Go back\r\n              </Button>\r\n            ]}\r\n          ></Result>\r\n        ) : (\r\n          <div></div>\r\n        )}\r\n        <Row\r\n          gutter={16}\r\n          style={{\r\n            marginLeft: 20,\r\n            marginRight: 20,\r\n            marginTop: 30,\r\n            marginBottom: 30\r\n          }}\r\n        >\r\n          {items.map(item => (\r\n            <Col style={{ paddingBottom: \"20px\" }} span={8}>\r\n              <Card\r\n                title={item.title}\r\n                // extra={<a href=\"#\">Link to reddit</a>}\r\n                //style={{ width: window.innerWidth / 3 }}\r\n                style={{\r\n                  border: \"solid 1px #555\",\r\n                  backgroundColor: \"#eed\",\r\n                  boxShadow: \"10px -10px  rgba(0,0,0,0.6)\",\r\n                  paddingRight: 20\r\n                }}\r\n              >\r\n                <p>Age: {item.age}</p>\r\n                <p>Parsed number: {item.number}</p>\r\n                <p>\r\n                  Link:{\" \"}\r\n                  <a href={item.link} target=\"_blank\">\r\n                    Open post\r\n                  </a>\r\n                </p>\r\n              </Card>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n      </Skeleton>\r\n    </div>\r\n    // </div>\r\n  );\r\n}\r\n\r\nexport default ScammerFinderPage;\r\n","import React from \"react\";\r\n\r\nfunction Information(props) {\r\n  return (\r\n    <div\r\n      style={{\r\n        textAlign: \"center\",\r\n        fontFamily: \"Titillium Web, sans-serif\"\r\n      }}\r\n    >\r\n      <h1 style={{ color: \"white\", fontSize: 50 }}>\r\n        Welcome to ScamFinder-Reddit\r\n      </h1>\r\n      <p>Start by entering some search ranges below and clicking 'Search'</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Information;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Radio,\r\n  Input,\r\n  Row,\r\n  Col,\r\n  Button,\r\n  Card,\r\n  Tooltip,\r\n  InputNumber,\r\n  Checkbox\r\n} from \"antd\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Information from \"./Information\";\r\n\r\nfunction ChoicePage(props) {\r\n  const [state, setState] = useState({\r\n    sortBy: \"new\",\r\n    timeFrame: \"hour\",\r\n    query: \"tech support\",\r\n    count: 125,\r\n    showAll: true\r\n  });\r\n  const history = useHistory();\r\n\r\n  const onChange = e => {\r\n    const { value, name } = e.target;\r\n    if ((!isNaN(value) || value !== \"\") && (!isNaN(name) || name !== \"\")) {\r\n      setState(prevState => ({\r\n        ...prevState,\r\n        [name]: value\r\n      }));\r\n    }\r\n  };\r\n  const countChanged = newVal => {\r\n    setState(prevState => ({\r\n      ...prevState,\r\n      count: newVal\r\n    }));\r\n  };\r\n  const checkboxChanged = e => {\r\n    setState(prevVal => ({\r\n      ...prevVal,\r\n      showAll: e.target.checked\r\n    }));\r\n  };\r\n  const radioStyle = {\r\n    display: \"block\",\r\n    height: \"30px\",\r\n    lineHeight: \"30px\"\r\n  };\r\n  return (\r\n    <div>\r\n      <Information></Information>\r\n      <Row>\r\n        <Col span={12} offset={6} style={{ textAlign: \"center\" }}>\r\n          <Card title=\"Select the sorting method.\">\r\n            <Radio.Group onChange={onChange} name=\"sortBy\" value={state.sortBy}>\r\n              <Radio style={radioStyle} value={\"new\"}>\r\n                New\r\n              </Radio>\r\n              <Radio style={radioStyle} value={\"relevance\"}>\r\n                Relevance\r\n              </Radio>\r\n              <Radio style={radioStyle} value={\"hot\"}>\r\n                Hot\r\n              </Radio>\r\n            </Radio.Group>\r\n          </Card>\r\n          <br></br>\r\n\r\n          <Card title=\"Select the time-frame. How old should the posts be at maximum?\">\r\n            <Radio.Group\r\n              onChange={onChange}\r\n              name=\"timeFrame\"\r\n              value={state.timeFrame}\r\n            >\r\n              <Radio style={radioStyle} value={\"hour\"}>\r\n                Hour\r\n              </Radio>\r\n              <Radio style={radioStyle} value={\"day\"}>\r\n                Day\r\n              </Radio>\r\n              <Radio style={radioStyle} value={\"week\"}>\r\n                Week\r\n              </Radio>\r\n            </Radio.Group>\r\n          </Card>\r\n          <br></br>\r\n\r\n          <Card title=\"Amount of posts to load. Anything around 125 - 250 is more than enough.\">\r\n            <InputNumber\r\n              min={25}\r\n              max={500}\r\n              defaultValue=\"50\"\r\n              name=\"count\"\r\n              precision={0}\r\n              onChange={countChanged}\r\n            />\r\n          </Card>\r\n          <Card>\r\n            <Checkbox onChange={checkboxChanged} defaultChecked={true}>\r\n              Show duplicate numbers\r\n            </Checkbox>\r\n          </Card>\r\n          <br></br>\r\n          <Card title=\"Enter your query. Try something like 'tech support' or 'customer support'\">\r\n            <Input\r\n              placeholder=\"Tech support\"\r\n              name=\"query\"\r\n              onChange={onChange}\r\n              style={{ width: 200, marginBottom: \"10px\" }}\r\n            />\r\n            <br></br>\r\n            <Button\r\n              type=\"primary\"\r\n              icon=\"search\"\r\n              onClick={() => {\r\n                history.push(\r\n                  \"/find?timeFrame=\" +\r\n                    state.timeFrame +\r\n                    \"&sortBy=\" +\r\n                    state.sortBy +\r\n                    \"&query=\" +\r\n                    state.query +\r\n                    \"&count=\" +\r\n                    state.count +\r\n                    \"&showAll=\" +\r\n                    state.showAll\r\n                );\r\n              }}\r\n            >\r\n              Search\r\n            </Button>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChoicePage;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { fetchJsonp } from \"fetch-jsonp\";\nimport ScammerFinderPage from \"./components/ScammerFinderPage\";\nimport { HashRouter as Router, Route } from \"react-router-dom\";\nimport ChoicePage from \"./components/ChoicePage\";\nfunction App() {\n  return (\n    <Router>\n      <Route exact path={\"/\"} component={ChoicePage}></Route>\n      <Route path={\"/find\"} component={ScammerFinderPage}></Route>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}